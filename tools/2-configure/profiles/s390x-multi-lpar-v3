#!/bin/bash -ex
#
# Juju >= 2.0 Only (Native deploy - No `juju-deployer`)
#

# Set overrides, if not already set.
# LA_TEMP:
[[ -z "$GATEWAY" ]] && export GATEWAY="172.20.0.1"
[[ -z "$CIDR_EXT" ]] && export CIDR_EXT="172.20.0.0/24"
[[ -z "$FIP_RANGE" ]] && export FIP_RANGE="172.20.0.150:172.20.0.230"
[[ -z "$NAMESERVER" ]] && export NAMESERVER="172.20.0.2"
[[ -z "$CIDR_PRIV" ]] && export CIDR_PRIV="192.168.20.0/24"
[[ -z "$SWIFT_IP" ]] && export SWIFT_IP="10.245.161.162"  # Cirros image hosted on serverstack

juju run --unit ovn-central/leader 'echo This is an OVN setup' 2>/dev/null && is_ovn_setup=true || is_ovn_setup=false

# Accept private network type as first parameter. If unspecified, assume:
# - 'gre' for an OVS setup,
# - 'geneve' for an OVN setup.
if [[ "$is_ovn_setup" == "true" ]]; then
    default_net_type=geneve
else
    default_net_type=gre
fi
net_type=${1:-"$default_net_type"}

(#LA_TEMP:
    . /home/ubuntu/novarc
    export NET_ID=78f33eb6-2896-4815-ada3-07c0b10c1dea
    /home/ubuntu/Documents/git/openstack-charm-testing/bin/post-deploy-config neutron-gateway
)

# Configure neutron networking on overcloud
source ../../openrcv3_domain
./bin/neutron-ext-net-ksv3 --project admin --network-type flat -g $GATEWAY -c $CIDR_EXT -f $FIP_RANGE ext_net  # LA_TEMP
./bin/neutron-tenant-net-ksv3 --project admin -r provider-router -N $NAMESERVER private $CIDR_PRIV  # LA_TEMP
ext_net=$(openstack network list | awk '/ext_net/ {print $2}')

# Create demo/testing users, tenants and flavor
openstack project show demo || openstack project create demo
openstack user show demo || openstack user create --project demo --password pass --enable --email demo@dev.null demo
openstack role show Member || openstack role create Member
openstack role show ResellerAdmin || openstack role create ResellerAdmin  # needed for AccountQuotasTest
openstack role add --user demo --project demo Member
openstack project show alt_demo || openstack project create alt_demo
openstack user show alt_demo || openstack user create --project alt_demo --password secret --enable --email alt_demo@dev.null alt_demo
openstack role add --user alt_demo --project alt_demo Member
access=$(openstack ec2 credentials create --user demo --project demo  | awk '/access/ {print $4}')
secret=$(openstack ec2 credentials show $access  | awk '/secret/ {print $4}')

source ../../openrcv3_project
openstack flavor show m1.tiny || openstack flavor create   --id 1 --ram 512   --disk 1  --vcpus 1 m1.tiny
openstack flavor show m1.small || openstack flavor create  --id 2 --ram 2048  --disk 10 --vcpus 1 m1.small
openstack flavor show m1.medium || openstack flavor create --id 3 --ram 4096  --disk 10 --vcpus 2 m1.medium
openstack flavor show m1.large || openstack flavor create  --id 4 --ram 8192  --disk 80 --vcpus 4 m1.large
openstack flavor show m1.xlarge || openstack flavor create --id 5 --ram 16384 --disk 160 --vcpus 8 m1.xlarge
openstack flavor show m1.cirros || openstack flavor create --id 6 --ram 64 --disk 1 --vcpus 1 m1.cirros
openstack flavor show m1.tempest || openstack flavor create --id 7 --ram 256 --disk 5 --vcpus 1 m1.tempest
openstack flavor show m2.tempest || openstack flavor create --id 8 --ram 512 --disk 5 --vcpus 1 m2.tempest


# Load images into glance
#LA_TODO tools/images_s390x-v3.sh

# Set security groups and rules
tools/sec_groups.sh

# Tune for higher-density testing
#LA_TODO tools/quota_million-v3.sh  # not needed after all it seems

# Gather vars for tempest template
image_id=$(glance image-list | grep cirros | awk '{ print $2 }')
image_alt_id=$(glance image-list | grep 20.04 | awk '{ print $2 }')  # LA_TEMP
# NOTE(lourot): There are no CirrOS images for s390x, see lp:1619752, so
# image_id is probably empty and Tempest will fail. Let's use an Ubuntu image
# for Tempest testing instead:
image_id="$image_alt_id"
router=$(neutron router-list | grep provider-router | awk '{ print $2}')
keystone_unit=$(juju status keystone|grep -i workload -A1|tail -n1|awk '{print $1}'|tr -d '*')
dashboard_unit=$(juju status openstack-dashboard|grep -i workload -A1|tail -n1|awk '{print $1}'|tr -d '*')
ncc_unit=$(juju status nova-cloud-controller|grep -i workload -A1|tail -n1|awk '{print $1}'|tr -d '*')
keystone=$(juju run --unit ${keystone_unit} "unit-get private-address")
dashboard=$(juju run --unit ${dashboard_unit} "unit-get private-address")
ncc=$(juju run --unit ${ncc_unit} "unit-get private-address")
http=${OS_AUTH_PROTOCOL:-http}
default_domain_id=$(openstack domain list | awk '/default/ {print $2}')
admin_password=${OS_PASSWORD:-openstack}
root_ca_file=$OS_CACERT
# NOTE(lourot): when deploying focal-ussuri-ovn,
# 'openstack extension list --network' doesn't show 'l3_agent_scheduler' nor
# 'dvr'. focal-wallaby-ovn also doesn't show 'dhcp_agent_scheduler'.
if [[ "$is_ovn_setup" == "true" ]]; then
    # Same as 'all' minus ('l3_agent_scheduler', 'dvr', 'dhcp_agent_scheduler'):
    network_extensions=security-group,ext-gw-mode,binding,quotas,agent,provider,router,extraroute,external-net,allowed-address-pairs,extra_dhcp_opt,metering
else
    network_extensions=all
fi

# Insert vars into tempest conf
sed -e "s/__IMAGE_ID__/$image_id/g" -e "s/__IMAGE_ALT_ID__/$image_alt_id/g" \
    -e "s/__DASHBOARD__/$dashboard/g" -e "s/__KEYSTONE__/$keystone/g" \
    -e "s/__EXT_NET__/$ext_net/g" -e "s/__PROTO__/$http/g" \
    -e "s/__SWIFT__/$SWIFT_IP/g" \
    -e "s/__NAMESERVER__/$NAMESERVER/g" \
    -e "s/__CIDR_PRIV__/${CIDR_PRIV////\\/}/g" \
    -e "s/__NCC__/$ncc/g" -e "s/__SECRET__/$secret/g" -e "s/__ACCESS__/$access/g" \
    -e "s/__DEFAULT_DOMAIN_ID__/$default_domain_id/g" \
    -e "s/__ADMIN_PASSWORD__/$admin_password/g" \
    -e "s|__ROOT_CA_FILE__|$root_ca_file|g" \
    -e "s/__NETWORK_EXTENSIONS__/$network_extensions/g" \
    templates/tempest/tempest-v3.conf.template > tempest.conf

# Git tempest, place the rendered tempest template
[ -d tempest ] || git clone https://github.com/AurelienLourot/tempest  # LA_TEMP
git --git-dir=tempest/.git --work-tree=tempest checkout octavia  # LA_TEMP
git --git-dir=tempest/.git --work-tree=tempest pull
cp tempest.conf tempest/etc
cp templates/tempest/accounts.yaml tempest/etc
